import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";

const quizQuestions = [
  {
    q: "‡§≠‡§æ‡§∞‡§§ ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§µ‡§§‡§Ç‡§§‡•ç‡§∞‡§§‡§æ ‡§¶‡§ø‡§µ‡§∏ ‡§ï‡§¨ ‡§Æ‡§®‡§æ‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à?",
    opts: ["15 ‡§Ö‡§ó‡§∏‡•ç‡§§", "26 ‡§ú‡§®‡§µ‡§∞‡•Ä", "2 ‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞", "14 ‡§Ö‡§ó‡§∏‡•ç‡§§"],
    ans: 0,
  },
  {
    q: "‡§≠‡§æ‡§∞‡§§ ‡§ï‡•ã ‡§Ü‡§ú‡§º‡§æ‡§¶‡•Ä ‡§ï‡§ø‡§∏ ‡§µ‡§∞‡•ç‡§∑ ‡§Æ‡§ø‡§≤‡•Ä ‡§•‡•Ä?",
    opts: ["1945", "1946", "1947", "1950"],
    ans: 2,
  },
  {
    q: "‡§≠‡§æ‡§∞‡§§ ‡§ï‡•á ‡§™‡§π‡§≤‡•á ‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§ï‡•å‡§® ‡§•‡•á?",
    opts: ["‡§Æ‡§π‡§æ‡§§‡•ç‡§Æ‡§æ ‡§ó‡§æ‡§Ç‡§ß‡•Ä", "‡§∏‡•Å‡§≠‡§æ‡§∑ ‡§ö‡§Ç‡§¶‡•ç‡§∞ ‡§¨‡•ã‡§∏", "‡§≤‡§æ‡§≤ ‡§¨‡§π‡§æ‡§¶‡•Å‡§∞ ‡§∂‡§æ‡§∏‡•ç‡§§‡•ç‡§∞‡•Ä", "‡§ú‡§µ‡§æ‡§π‡§∞‡§≤‡§æ‡§≤ ‡§®‡•á‡§π‡§∞‡•Ç"],
    ans: 3,
  },
  {
    q: "‡§≠‡§æ‡§∞‡§§ ‡§ï‡•Ä ‡§∏‡•ç‡§µ‡§§‡§Ç‡§§‡•ç‡§∞‡§§‡§æ ‡§ï‡•Ä ‡§ò‡•ã‡§∑‡§£‡§æ ‡§ï‡§ø‡§∏‡§®‡•á ‡§ï‡•Ä ‡§•‡•Ä?",
    opts: ["‡§¨‡•ç‡§∞‡§ø‡§ü‡§ø‡§∂ ‡§∏‡§Ç‡§∏‡§¶", "‡§ï‡§æ‡§Ç‡§ó‡•ç‡§∞‡•á‡§∏", "‡§®‡•á‡§π‡§∞‡•Ç", "‡§Æ‡§æ‡§â‡§Ç‡§ü‡§¨‡•á‡§ü‡§®"],
    ans: 0,
  },
  {
    q: "‡§∏‡•ç‡§µ‡§§‡§Ç‡§§‡•ç‡§∞‡§§‡§æ ‡§ï‡•Ä ‡§™‡§π‡§≤‡•Ä ‡§ò‡§°‡§º‡•Ä ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§∏‡§®‡•á 'Tryst with Destiny' ‡§≠‡§æ‡§∑‡§£ ‡§¶‡§ø‡§Ø‡§æ?",
    opts: ["‡§ó‡§æ‡§Ç‡§ß‡•Ä ‡§ú‡•Ä", "‡§®‡•á‡§π‡§∞‡•Ç", "‡§™‡§ü‡•á‡§≤", "‡§∞‡§æ‡§ú‡•á‡§Ç‡§¶‡•ç‡§∞ ‡§™‡•ç‡§∞‡§∏‡§æ‡§¶"],
    ans: 1,
  },
  {
    q: "‡§≠‡§æ‡§∞‡§§ ‡§õ‡•ã‡§°‡§º‡•ã ‡§Ü‡§Ç‡§¶‡•ã‡§≤‡§® ‡§ï‡§ø‡§∏ ‡§µ‡§∞‡•ç‡§∑ ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•Å‡§Ü ‡§•‡§æ?",
    opts: ["1940", "1941", "1942", "1943"],
    ans: 2,
  },
  {
    q: "‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§ó‡§æ‡§® '‡§ú‡§® ‡§ó‡§£ ‡§Æ‡§®' ‡§ï‡•á ‡§∞‡§ö‡§Ø‡§ø‡§§‡§æ ‡§ï‡•å‡§® ‡§π‡•à‡§Ç?",
    opts: ["‡§¨‡§Ç‡§ï‡§ø‡§Æ ‡§ö‡§Ç‡§¶‡•ç‡§∞ ‡§ö‡§ü‡•ç‡§ü‡•ã‡§™‡§æ‡§ß‡•ç‡§Ø‡§æ‡§Ø", "‡§∞‡§µ‡•Ä‡§Ç‡§¶‡•ç‡§∞‡§®‡§æ‡§• ‡§ü‡•à‡§ó‡•ã‡§∞", "‡§∏‡§∞‡•ã‡§ú‡§ø‡§®‡•Ä ‡§®‡§æ‡§Ø‡§°‡•Ç", "‡§∏‡•Å‡§≠‡§æ‡§∑ ‡§ö‡§Ç‡§¶‡•ç‡§∞ ‡§¨‡•ã‡§∏"],
    ans: 1,
  },
  {
    q: "‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§ß‡•ç‡§µ‡§ú ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§§‡§®‡•á ‡§∞‡§Ç‡§ó ‡§π‡•à‡§Ç?",
    opts: ["2", "3", "4", "5"],
    ans: 1,
  },
  {
    q: "‡§ö‡§Ç‡§¶‡•ç‡§∞‡§∂‡•á‡§ñ‡§∞ ‡§Ü‡§ú‡§º‡§æ‡§¶ ‡§ï‡§æ ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§®‡§æ‡§Æ ‡§ï‡•ç‡§Ø‡§æ ‡§•‡§æ?",
    opts: ["‡§ö‡§Ç‡§¶‡•ç‡§∞‡§∂‡•á‡§ñ‡§∞ ‡§§‡§ø‡§µ‡§æ‡§∞‡•Ä", "‡§ö‡§Ç‡§¶‡•ç‡§∞‡§∂‡•á‡§ñ‡§∞ ‡§∏‡§ø‡§Ç‡§π", "‡§ö‡§Ç‡§¶‡•ç‡§∞‡§∂‡•á‡§ñ‡§∞ ‡§Ø‡§æ‡§¶‡§µ", "‡§ö‡§Ç‡§¶‡•ç‡§∞‡§∂‡•á‡§ñ‡§∞ ‡§ó‡•Å‡§™‡•ç‡§§‡§æ"],
    ans: 0,
  },
  {
    q: "‡§≠‡§æ‡§∞‡§§ ‡§ï‡•Ä ‡§∏‡•ç‡§µ‡§§‡§Ç‡§§‡•ç‡§∞‡§§‡§æ ‡§ï‡•á ‡§∏‡§Æ‡§Ø ‡§µ‡§æ‡§Ø‡§∏‡§∞‡§æ‡§Ø ‡§ï‡•å‡§® ‡§•‡§æ?",
    opts: ["‡§≤‡•â‡§∞‡•ç‡§° ‡§Æ‡§æ‡§â‡§Ç‡§ü‡§¨‡•á‡§ü‡§®", "‡§≤‡•â‡§∞‡•ç‡§° ‡§µ‡•á‡§µ‡•á‡§≤", "‡§≤‡•â‡§∞‡•ç‡§° ‡§≤‡§ø‡§®‡§≤‡§ø‡§•‡§ó‡•ã", "‡§≤‡•â‡§∞‡•ç‡§° ‡§á‡§∞‡§µ‡§ø‡§®"],
    ans: 0,
  },
  {
    q: "‡§¶‡§æ‡§Ç‡§°‡•Ä ‡§Æ‡§æ‡§∞‡•ç‡§ö ‡§ï‡§ø‡§∏ ‡§∏‡§æ‡§≤ ‡§π‡•Å‡§Ü ‡§•‡§æ?",
    opts: ["1928", "1929", "1930", "1931"],
    ans: 2,
  },
  {
    q: "‡§∏‡•ç‡§µ‡§§‡§Ç‡§§‡•ç‡§∞‡§§‡§æ ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§Æ‡•á‡§Ç '‡§ó‡§¶‡§∞ ‡§™‡§æ‡§∞‡•ç‡§ü‡•Ä' ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§æ‡§™‡§®‡§æ ‡§ï‡§π‡§æ‡§Ç ‡§π‡•Å‡§à ‡§•‡•Ä?",
    opts: ["‡§≠‡§æ‡§∞‡§§", "‡§Ö‡§Æ‡•á‡§∞‡§ø‡§ï‡§æ", "‡§á‡§Ç‡§ó‡•ç‡§≤‡•à‡§Ç‡§°", "‡§ï‡§®‡§æ‡§°‡§æ"],
    ans: 1,
  },
  {
    q: "‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§ï‡§æ‡§Ç‡§ó‡•ç‡§∞‡•á‡§∏ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§æ‡§™‡§®‡§æ ‡§ï‡§ø‡§∏ ‡§µ‡§∞‡•ç‡§∑ ‡§π‡•Å‡§à?",
    opts: ["1885", "1886", "1887", "1888"],
    ans: 0,
  },
  {
    q: "‡§®‡•á‡§§‡§æ‡§ú‡•Ä ‡§∏‡•Å‡§≠‡§æ‡§∑ ‡§ö‡§Ç‡§¶‡•ç‡§∞ ‡§¨‡•ã‡§∏ ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§ó‡§†‡§ø‡§§ ‡§∏‡•á‡§®‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§ï‡•ç‡§Ø‡§æ ‡§•‡§æ?",
    opts: ["‡§π‡§ø‡§Ç‡§¶ ‡§´‡•å‡§ú", "‡§Ü‡§ú‡§º‡§æ‡§¶ ‡§π‡§ø‡§Ç‡§¶ ‡§´‡•å‡§ú", "‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§∏‡•á‡§®‡§æ", "‡§∏‡•ç‡§µ‡§§‡§Ç‡§§‡•ç‡§∞‡§§‡§æ ‡§∏‡•á‡§®‡§æ"],
    ans: 1,
  },
  {
    q: "‡§≠‡§æ‡§∞‡§§ ‡§ï‡•á ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§™‡§ø‡§§‡§æ ‡§ï‡§ø‡§∏‡•á ‡§ï‡§π‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à?",
    opts: ["‡§ú‡§µ‡§æ‡§π‡§∞‡§≤‡§æ‡§≤ ‡§®‡•á‡§π‡§∞‡•Ç", "‡§Æ‡§π‡§æ‡§§‡•ç‡§Æ‡§æ ‡§ó‡§æ‡§Ç‡§ß‡•Ä", "‡§∏‡§∞‡§¶‡§æ‡§∞ ‡§™‡§ü‡•á‡§≤", "‡§≠‡§ó‡§§ ‡§∏‡§ø‡§Ç‡§π"],
    ans: 1,
  },
  {
    q: "'‡§∏‡§∞‡§´‡§∞‡•ã‡§∂‡•Ä ‡§ï‡•Ä ‡§§‡§Æ‡§®‡•ç‡§®‡§æ' ‡§ï‡•á ‡§∞‡§ö‡§Ø‡§ø‡§§‡§æ ‡§ï‡•å‡§® ‡§π‡•à‡§Ç?",
    opts: ["‡§Ö‡§∂‡§´‡§æ‡§ï‡§â‡§≤‡•ç‡§≤‡§æ‡§π ‡§ñ‡§æ‡§®", "‡§∞‡§æ‡§Æ‡§™‡•ç‡§∞‡§∏‡§æ‡§¶ ‡§¨‡§ø‡§∏‡•ç‡§Æ‡§ø‡§≤", "‡§≠‡§ó‡§§ ‡§∏‡§ø‡§Ç‡§π", "‡§ö‡§Ç‡§¶‡•ç‡§∞‡§∂‡•á‡§ñ‡§∞ ‡§Ü‡§ú‡§º‡§æ‡§¶"],
    ans: 1,
  },
  {
    q: "‡§ú‡§≤‡§ø‡§Ø‡§æ‡§Ç‡§µ‡§æ‡§≤‡§æ ‡§¨‡§æ‡§ó ‡§π‡§§‡•ç‡§Ø‡§æ‡§ï‡§æ‡§Ç‡§° ‡§ï‡§ø‡§∏ ‡§µ‡§∞‡•ç‡§∑ ‡§π‡•Å‡§Ü?",
    opts: ["1918", "1919", "1920", "1921"],
    ans: 1,
  },
  {
    q: "‡§≠‡§æ‡§∞‡§§ ‡§ï‡•Ä ‡§™‡§π‡§≤‡•Ä ‡§Æ‡§π‡§ø‡§≤‡§æ ‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§ï‡•å‡§® ‡§•‡•Ä‡§Ç?",
    opts: ["‡§∏‡§∞‡•ã‡§ú‡§ø‡§®‡•Ä ‡§®‡§æ‡§Ø‡§°‡•Ç", "‡§á‡§Ç‡§¶‡§ø‡§∞‡§æ ‡§ó‡§æ‡§Ç‡§ß‡•Ä", "‡§µ‡§ø‡§ú‡§Ø‡§æ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Æ‡•Ä ‡§™‡§Ç‡§°‡§ø‡§§", "‡§Ö‡§∞‡•Å‡§£‡§æ ‡§Ü‡§∏‡§´ ‡§Ö‡§≤‡•Ä"],
    ans: 1,
  },
  {
    q: "‡§∏‡•ç‡§µ‡§§‡§Ç‡§§‡•ç‡§∞‡§§‡§æ ‡§¶‡§ø‡§µ‡§∏ ‡§™‡§∞ ‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§ï‡§π‡§æ‡§Ç ‡§∏‡•á ‡§¶‡•á‡§∂ ‡§ï‡•ã ‡§∏‡§Ç‡§¨‡•ã‡§ß‡§ø‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?",
    opts: ["‡§á‡§Ç‡§°‡§ø‡§Ø‡§æ ‡§ó‡•á‡§ü", "‡§≤‡§æ‡§≤ ‡§ï‡§ø‡§≤‡§æ", "‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡§™‡§§‡§ø ‡§≠‡§µ‡§®", "‡§∏‡§Ç‡§∏‡§¶ ‡§≠‡§µ‡§®"],
    ans: 1,
  },
  {
    q: "‡§≠‡§æ‡§∞‡§§ ‡§ï‡•á ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§ö‡§ø‡§π‡•ç‡§® ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§§‡§®‡•á ‡§∏‡§ø‡§Ç‡§π ‡§π‡•à‡§Ç?",
    opts: ["2", "3", "4", "5"],
    ans: 2,
  }
];

export default function QuizSectionInline() {
  const [isQuizStarted, setIsQuizStarted] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [score, setScore] = useState(0);
  const [showResults, setShowResults] = useState(false);
  const [timer, setTimer] = useState(15);
  const [isAnswerSelected, setIsAnswerSelected] = useState(false);
  const [showCorrectAnswer, setShowCorrectAnswer] = useState(false);

  // Timer effect
  useEffect(() => {
    if (isQuizStarted && !showResults && !isAnswerSelected && timer > 0) {
      const timerId = setTimeout(() => {
        setTimer(timer - 1);
      }, 1000);
      return () => clearTimeout(timerId);
    } else if (timer === 0 && !isAnswerSelected) {
      // Time's up - show correct answer
      setShowCorrectAnswer(true);
      setIsAnswerSelected(true);
    }
  }, [timer, isQuizStarted, showResults, isAnswerSelected]);

  const startQuiz = () => {
    setIsQuizStarted(true);
    setCurrentQuestion(0);
    setScore(0);
    setShowResults(false);
    setTimer(15);
    setIsAnswerSelected(false);
    setShowCorrectAnswer(false);
  };

  const handleAnswerSelect = (answerIndex: number) => {
    if (isAnswerSelected) return;
    
    setSelectedAnswer(answerIndex);
    setIsAnswerSelected(true);
    setShowCorrectAnswer(true);
    
    if (answerIndex === quizQuestions[currentQuestion].ans) {
      setScore(score + 1);
    }
  };

  const handleNext = () => {
    if (currentQuestion < quizQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer(null);
      setIsAnswerSelected(false);
      setShowCorrectAnswer(false);
      setTimer(15);
    } else {
      setShowResults(true);
    }
  };

  const resetQuiz = () => {
    setIsQuizStarted(false);
    setCurrentQuestion(0);
    setSelectedAnswer(null);
    setScore(0);
    setShowResults(false);
    setTimer(15);
    setIsAnswerSelected(false);
    setShowCorrectAnswer(false);
  };

  // Welcome/Intro Screen
  if (!isQuizStarted) {
    return (
      <section id="quiz" className="py-16 bg-gradient-to-br from-saffron/10 via-white to-flag-green/10 relative">
        {/* Background Ashoka Chakra */}
        <div 
          className="absolute inset-0 opacity-5 bg-no-repeat bg-center bg-contain pointer-events-none"
          style={{
            backgroundImage: "url('https://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Ashoka_Chakra.svg/1200px-Ashoka_Chakra.svg.png')",
            backgroundSize: '300px'
          }}
        />
        
        <div className="container mx-auto px-4 relative z-10">
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-12">
              <h2 className="text-3xl md:text-4xl font-bold text-navy-blue mb-4 font-hindi">‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§§‡•ç‡§§‡§∞‡•Ä - Quiz</h2>
              <p className="text-gray-600 max-w-2xl mx-auto">Test your knowledge about Indian Independence Day and freedom fighters</p>
            </div>
            
            <div className="bg-white rounded-3xl shadow-2xl p-8 md:p-12 text-center border-4 border-saffron/20">
              <h1 className="text-4xl md:text-5xl font-extrabold text-saffron mb-6 font-hindi">
                üáÆüá≥ 15 ‡§Ö‡§ó‡§∏‡•ç‡§§ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º
              </h1>
              <div className="inline-block bg-gradient-to-r from-saffron to-flag-green text-white text-lg px-6 py-2 rounded-full mb-8 shadow-lg">
                Max {quizQuestions.length} Points
              </div>
              <div className="text-gray-800 leading-relaxed mb-8 space-y-3 text-left max-w-2xl mx-auto">
                <div className="bg-gradient-to-r from-orange-50 to-green-50 rounded-lg p-4 border-l-4 border-saffron">
                  <p className="font-hindi text-lg">‚ö° ‡§á‡§∏ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§Æ‡•á‡§Ç <strong>‡§∏‡•ç‡§µ‡§§‡§Ç‡§§‡•ç‡§∞‡§§‡§æ ‡§¶‡§ø‡§µ‡§∏</strong> ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á <strong>{quizQuestions.length} ‡§™‡•ç‡§∞‡§∂‡•ç‡§®</strong> ‡§π‡•ã‡§Ç‡§ó‡•á‡•§</p>
                </div>
                <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-4 border-l-4 border-flag-green">
                  <p className="font-hindi text-lg">‚ö° ‡§π‡§∞ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ <strong>15 ‡§∏‡•á‡§ï‡§Ç‡§°</strong> ‡§î‡§∞ ‡§π‡§∞ ‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡§∞ ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ <span className="text-green-700 font-bold">+1 ‡§™‡•â‡§á‡§Ç‡§ü</span>‡•§</p>
                </div>
                <div className="bg-gradient-to-r from-red-50 to-orange-50 rounded-lg p-4 border-l-4 border-red-400">
                  <p className="font-hindi text-lg">‚ö° ‡§ó‡§≤‡§§ ‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡§∞ ‡§ï‡•ã‡§à ‡§™‡•â‡§á‡§Ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ‡•§</p>
                </div>
                <div className="bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg p-4 border-l-4 border-yellow-400">
                  <p className="font-hindi text-lg">‚ö° ‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§ï‡•ã‡§∞ ‡§¶‡§ø‡§ñ‡§æ‡§à ‡§¶‡•á‡§ó‡§æ! üéâ</p>
                </div>
              </div>
              <Button
                onClick={startQuiz}
                className="mt-6 bg-flag-green hover:bg-green-700 text-white text-xl font-semibold py-4 px-12 rounded-full shadow-xl transform hover:scale-105 active:scale-95 transition-all duration-200"
              >
                üöÄ Start Quiz
              </Button>
            </div>
          </div>
        </div>
      </section>
    );
  }

  // Results Screen
  if (showResults) {
    const percentage = Math.round((score / quizQuestions.length) * 100);
    const isExcellent = score === quizQuestions.length;
    const isGood = score >= quizQuestions.length / 2;
    
    return (
      <section id="quiz" className="py-16 bg-gradient-to-br from-saffron/10 via-white to-flag-green/10">
        <div className="container mx-auto px-4">
          <div className="max-w-3xl mx-auto text-center">
            <div className="bg-white rounded-3xl shadow-2xl p-8 md:p-12 border-4 border-saffron/20">
              <div className="mb-8">
                <h2 className="text-4xl md:text-5xl font-extrabold mb-4 text-saffron font-hindi">üéâ Quiz Complete!</h2>
                <div className="bg-gradient-to-r from-saffron/10 to-flag-green/10 rounded-2xl p-6 mb-6">
                  <p className="text-4xl md:text-5xl font-bold text-navy-blue mb-2">{score} / {quizQuestions.length}</p>
                  <p className="text-2xl text-gray-700 font-hindi">‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§ï‡•ã‡§∞</p>
                  <div className="mt-4">
                    <div className="bg-gray-200 rounded-full h-4 w-full max-w-md mx-auto">
                      <div 
                        className={`h-4 rounded-full transition-all duration-1000 ${
                          isExcellent ? 'bg-gradient-to-r from-green-500 to-green-600' :
                          isGood ? 'bg-gradient-to-r from-yellow-500 to-orange-500' :
                          'bg-gradient-to-r from-red-500 to-red-600'
                        }`}
                        style={{ width: `${percentage}%` }}
                      />
                    </div>
                    <p className="text-lg font-semibold text-gray-600 mt-2">{percentage}%</p>
                  </div>
                </div>
              </div>
              
              <div className={`rounded-2xl p-6 mb-8 ${
                isExcellent ? 'bg-gradient-to-r from-green-50 to-emerald-50 border-2 border-green-200' :
                isGood ? 'bg-gradient-to-r from-yellow-50 to-orange-50 border-2 border-yellow-200' :
                'bg-gradient-to-r from-red-50 to-pink-50 border-2 border-red-200'
              }`}>
                <div className="text-4xl mb-3">
                  {isExcellent ? 'üèÜ' : isGood ? 'üëè' : 'üí™'}
                </div>
                <p className="text-xl font-bold text-gray-800 mb-2 font-hindi">
                  {isExcellent ? "‡§™‡§∞‡§´‡•á‡§ï‡•ç‡§ü ‡§∏‡•ç‡§ï‡•ã‡§∞!" :
                   isGood ? "‡§¨‡§π‡•Å‡§§ ‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ!" :
                   "‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂!"}
                </p>
                <p className="text-gray-600 font-hindi text-lg">
                  {isExcellent ? "‡§Ü‡§™ ‡§è‡§ï ‡§∏‡§ö‡•ç‡§ö‡•á ‡§¶‡•á‡§∂‡§≠‡§ï‡•ç‡§§ ‡§π‡•à‡§Ç! ‡§≠‡§æ‡§∞‡§§ ‡§ï‡•á ‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∂‡§æ‡§®‡§¶‡§æ‡§∞ ‡§π‡•à‡•§" :
                   isGood ? "‡§≠‡§æ‡§∞‡§§ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§π‡•à‡•§ ‡§î‡§∞ ‡§≠‡•Ä ‡§∏‡•Ä‡§ñ‡§§‡•á ‡§∞‡§π‡•á‡§Ç‡•§" :
                   "‡§π‡§Æ‡§æ‡§∞‡•á ‡§Æ‡§π‡§æ‡§® ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§π‡§Æ‡•á‡§∂‡§æ ‡§ï‡•Å‡§õ ‡§® ‡§ï‡•Å‡§õ ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§ï‡•ã ‡§Æ‡§ø‡§≤‡§§‡§æ ‡§π‡•à‡•§"}
                </p>
              </div>
              
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button 
                  onClick={resetQuiz}
                  className="bg-flag-green hover:bg-green-700 text-white py-3 px-8 rounded-full text-xl shadow-lg active:scale-95 transition-all duration-200"
                >
                  üîÑ Restart Quiz
                </Button>
                <Button 
                  variant="outline"
                  onClick={() => window.scrollTo({top: 0, behavior: 'smooth'})}
                  className="border-saffron text-saffron hover:bg-saffron hover:text-white py-3 px-8 rounded-full text-xl shadow-lg active:scale-95 transition-all duration-200"
                >
                  üè† Back to Top
                </Button>
              </div>
            </div>
          </div>
        </div>
      </section>
    );
  }

  // Quiz Screen
  return (
    <section id="quiz" className="py-16 bg-gradient-to-br from-saffron/10 via-white to-flag-green/10">
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-3xl shadow-2xl p-6 md:p-8 border-4 border-saffron/20">
            {/* Indian Theme Header */}
            <div className="text-center mb-6">
              <h3 className="text-2xl md:text-3xl font-bold text-navy-blue mb-2 font-hindi">
                üáÆüá≥ ‡§∏‡•ç‡§µ‡§§‡§Ç‡§§‡•ç‡§∞‡§§‡§æ ‡§¶‡§ø‡§µ‡§∏ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º
              </h3>
              <p className="text-gray-600">‡§ú‡§Ø ‡§π‡§ø‡§®‡•ç‡§¶!</p>
            </div>

            {/* Progress and Timer Section */}
            <div className="bg-gradient-to-r from-saffron/10 to-flag-green/10 rounded-2xl p-4 mb-6">
              <div className="flex justify-between items-center mb-4">
                <div className="text-lg font-semibold text-navy-blue">
                  Question {currentQuestion + 1} of {quizQuestions.length}
                </div>
                <div className={`text-lg font-bold px-4 py-2 rounded-full ${
                  timer <= 5 ? 'bg-red-100 text-red-600 animate-pulse' : 
                  timer <= 10 ? 'bg-yellow-100 text-yellow-600' : 
                  'bg-green-100 text-green-600'
                }`}>
                  ‚è∞ {timer}s
                </div>
              </div>
              
              {/* Progress Bar */}
              <div className="bg-gray-200 rounded-full h-3">
                <div 
                  className="bg-gradient-to-r from-saffron to-flag-green h-3 rounded-full transition-all duration-300" 
                  style={{ width: `${((currentQuestion + 1) / quizQuestions.length) * 100}%` }}
                />
              </div>
              <div className="text-center mt-2 text-sm text-gray-600">
                Progress: {Math.round(((currentQuestion + 1) / quizQuestions.length) * 100)}% complete
              </div>
            </div>

            {/* Question Section */}
            <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-2xl p-6 mb-6 border-l-4 border-navy-blue">
              <div className="text-xl md:text-2xl font-bold text-navy-blue mb-4 min-h-[3rem] font-hindi leading-relaxed">
                {quizQuestions[currentQuestion].q}
              </div>
            </div>

            {/* Options Section */}
            <div className="grid grid-cols-1 gap-4 mb-6">
              {quizQuestions[currentQuestion].opts.map((option, index) => (
                <button
                  key={index}
                  onClick={() => handleAnswerSelect(index)}
                  disabled={isAnswerSelected}
                  className={`w-full text-left px-6 py-4 rounded-xl font-semibold transition-all duration-200 border-2 ${
                    showCorrectAnswer
                      ? index === quizQuestions[currentQuestion].ans
                        ? "bg-green-500 text-white border-green-600 shadow-lg"
                        : selectedAnswer === index && index !== quizQuestions[currentQuestion].ans
                        ? "bg-red-500 text-white border-red-600 shadow-lg"
                        : "bg-gray-50 text-gray-500 border-gray-200"
                      : selectedAnswer === index
                      ? "bg-saffron/20 border-saffron text-navy-blue shadow-md"
                      : "bg-white text-gray-700 border-gray-200 hover:bg-saffron/10 hover:border-saffron/50 hover:shadow-md"
                  } ${isAnswerSelected ? "cursor-not-allowed" : "cursor-pointer"}`}
                >
                  <span className="font-bold text-navy-blue mr-3">
                    {String.fromCharCode(65 + index)}.
                  </span>
                  {option}
                </button>
              ))}
            </div>

            {/* Action Button */}
            <Button
              onClick={handleNext}
              disabled={!isAnswerSelected}
              className="w-full bg-flag-green hover:bg-green-700 text-white text-lg font-semibold py-4 rounded-xl shadow-lg disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform active:scale-98"
            >
              {currentQuestion === quizQuestions.length - 1 ? "üèÅ Finish Quiz" : "Next Question ‚Üí"}
            </Button>

            {/* Score Display */}
            <div className="mt-6 text-center">
              <div className="inline-block bg-gradient-to-r from-saffron/20 to-flag-green/20 rounded-full px-6 py-2">
                <span className="text-lg font-semibold text-navy-blue">Score: {score} / {currentQuestion + (isAnswerSelected ? 1 : 0)}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}